#include<iostream>
#include <cmath>
//#include<vector>
using namespace std;
//int** arr1;
//void dot(vector<vector<int>>&arr1,const int& row, const int& col,int& num,const int& size,const int& zrow,const int& zcol ) {
//	if (size == 2) {
//		//cout << "zrow" << zrow << "zcol" << zcol << endl;
//		arr1[zrow][zcol] = num+1;
//		arr1[zrow][zcol + 1] = num + 2;
//		arr1[zrow + 1][zcol] = num + 3;
//		arr1[zrow + 1][zcol + 1] = num + 4;
//		num += 4;
//		/*for (auto i : arr1) {
//			for (auto j : i) {
//				cout << j;
//			}
//			cout << endl;
//		}*/
//		return;
//	}
//	dot(arr1, row, col, num, size / 2, 0, 0);
//	dot(arr1, row, col, num, size / 2, 0, size / 2);
//	dot(arr1, row, col, num, size / 2, size / 2, 0);
//	dot(arr1, row, col, num, size / 2, size/2, size / 2);
//}//벡터이용
//void dot( const int& row, const int& col, int& num, const int& size, const int& zrow, const int& zcol) {
//	if (size == 2) {
//		if (row - zrow < 2 && row - zrow >= 0 && col - zcol < 2 && col - zcol >= 0) {
//			cout << num + 1 + (2 * (row - zrow)) + col - zcol;
//		}
//		/*arr1[zrow][zcol] = num + 1;
//		arr1[zrow][zcol + 1] = num + 2;
//		arr1[zrow + 1][zcol] = num + 3;
//		arr1[zrow + 1][zcol + 1] = num + 4;*/
//		num += 4;
//		return;
//	}
//	dot( row, col, num, size / 2, zrow, zcol);
//	dot( row, col, num, size / 2, zrow, zcol + (size / 2));
//	dot( row, col, num, size / 2, zrow + (size / 2), zcol);
//	dot( row, col, num, size / 2, zrow + (size / 2), zcol + (size / 2));
//}//포인터이용
void dot(const int& row, const int& col, const int& num, const int& size, const int& zrow, const int& zcol, const int& sqrtnum) {

	if (size == 2) {
		if (row - zrow < 2 && row - zrow >= 0 && col - zcol < 2 && col - zcol >= 0) {
			cout << num + 1 + (2 * (row - zrow)) + col - zcol;
		}
		/*arr1[zrow][zcol] = num + 1;
		arr1[zrow][zcol + 1] = num + 2;
		arr1[zrow + 1][zcol] = num + 3;
		arr1[zrow + 1][zcol + 1] = num + 4;*/
		//num += 4;
		return;
	}


	if (row < zrow + (size / 2) && col < zcol + (size / 2)) {//1사분면
		//cout << "case1: " << num << endl;
		dot(row, col, num, size / 2, zrow, zcol, sqrtnum - 1);

	}
	else if (row < zrow + (size / 2) && col >= zcol + (size / 2)) {//2사분면
		//cout << "case2: " << num + pow(4, sqrtnum - 1) << endl;
		
		dot(row, col, num + pow(4, sqrtnum - 1), size / 2, zrow, zcol + (size / 2), sqrtnum - 1);

	}
	else if (row >= zrow + (size / 2) && col < zcol + (size / 2)) {//3사분면
		//cout << "case3: " << num + (2 * pow(4, sqrtnum - 1)) << endl;
		dot(row, col, num + 2 * pow(4, sqrtnum - 1), size / 2, zrow + (size / 2), zcol, sqrtnum - 1);

	}
	else {
		//cout << "case4: " << num + 3 * pow(4, sqrtnum - 1) << endl;
		dot(row, col, num + 3 * pow(4, sqrtnum - 1), size / 2, zrow + (size / 2), zcol + (size / 2), sqrtnum - 1);

	}
}
int main() {
	int size, row, col;
	cin >> size >> row >> col;
	//vector<vector<int>>arr1;
	int powsize = pow(2, size);
	//cout << "powsize:  " << powsize << endl;
	//arr1.assign(powsize, vector<int>(powsize, 0));

	//cout << sqrt(size);
	/*arr1 = new int* [powsize];
	for (int i = 0; i < powsize; i++) {
		arr1[i] = new int[powsize];

	}*/
	int num = -1;
	dot(row, col, num, powsize, 0, 0, size);

	return 0;
}
